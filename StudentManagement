import java.util.HashSet;
import java.util.Set;

public class StudentManagement {
    private Student[] students = new Student[100];  /** Mảng chứa các đối tượng Student */
    private int studentCount = 0;  /** Số lượng sinh viên hiện tại trong mảng */

    /** Phương thức thêm sinh viên mới vào mảng */
    public void addStudent(Student newStudent) {
        if (studentCount < 100) {
            students[studentCount] = newStudent;
            studentCount++;
        }
    }

    /** Phương thức kiểm tra xem hai sinh viên có cùng lớp hay không */
    public static boolean sameGroup(Student s1, Student s2) {
        if (s1 == null || s2 == null) return false;
        return s1.getGroup().equals(s2.getGroup());
    }

    /** Phương thức trả về danh sách sinh viên theo lớp */
    public String studentsByGroup() {
        StringBuilder result = new StringBuilder();
        Set<String> printedGroups = new HashSet<>();  /** Lưu các nhóm lớp đã in ra*/

        /** Duyệt qua các sinh viên*/
        for (int i = 0; i < studentCount; i++) {
            String group = students[i].getGroup();

            /** Nếu nhóm lớp chưa được in ra*/
            if (students[i] != null && !printedGroups.contains(group)) {
                printedGroups.add(group);  // Thêm vào danh sách nhóm lớp đã in
                result.append(group).append("\n");  // In ra tên nhóm lớp

                /** In ra thông tin các sinh viên thuộc nhóm lớp này*/
                for (int j = 0; j < studentCount; j++) {
                    if (students[j] != null && students[j].getGroup().equals(group)) {
                        result.append(students[j].getInfo()).append("\n");
                    }
                }
            }
        }
        return result.toString();
    }

    /* Phương thức xóa sinh viên khỏi danh sách theo ID*/
    public void removeStudent(String id) {
        for (int i = 0; i < studentCount; i++) {
            if (students[i] != null && students[i].getID().equals(id)) {
                /** Dịch chuyển các sinh viên sau sinh viên bị xóa lên một vị trí*/
                for (int j = i; j < studentCount - 1; j++) {
                    students[j] = students[j + 1];
                }
                students[studentCount - 1] = null;  /** Xóa sinh viên cuối cùng (vì đã được dịch chuyển) */
                studentCount--;  /** Giảm số lượng sinh viên */
                break;
            }
        }
    }
}
